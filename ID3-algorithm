# -*- coding: utf-8 -*-
"""
Created on Mon Oct 26 13:24:31 2020

@author: theshy
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_excel(r'E:\QQ下载文件\机器学习综合实践\机器学习(1)—模型评估与选择\aRRMSE.xlsx',names=['name','A','B','C'])
#分别导入A，B，C三个算法的测试结果
A = df['A']
B = df['B']
C = df['C']
# print('A:\n',A)
# print('B:\n',B)
# print('C:\n',C)

#计算k的值
# print('A算法个数:',len(A))
critical_value = 2.093
def cross_validation_T_test(A_vect, B_vect, critical_value):
    """
    @param: A_vect: 算法A的测试结果
    @param: B_vect: 算法B的测试结果    
    @param: critical_value:t分布的临界值
    @return: critical_var: 统计变量
    @return： critical_flag:是否有显著性差别
    """
    mean_A = np.mean(A_vect)#算法A测试性能的均值
    mean_B = np.mean(B_vect)#算法B测试性能的均值
    k = len(A_vect)#k为算法的个数
    delta = A_vect - B_vect#求算法A和B的测试性能的差值序列
    mean_value = np.mean(delta)#差值序列的均值
    var_value = np.var(delta)#差值序列的方差
    
    static_var = abs(k**0.5*mean_value/var_value**0.5)#计算统计变量的值
    
    critical_flag = 0
    if static_var < critical_value:#如果统计变量值小于临界值，则不存在显著差异
        print("No Critical Difference....")
    else:
        print("Critical Difference between two algorithms...")
        critical_flag = 1
        if mean_A < mean_B:#测试误差均值小的，性能更优
            print("A is better than B....")
        else:
            print("B is better than A....")
    return static_var, critical_flag

cross_validation_T_test(A, B, critical_value)
cross_validation_T_test(A, C, critical_value)
cross_validation_T_test(C, B, critical_value)
print("比较结果：性能C>B>A")

critical_value = 3.245
q_a = 2.344
df = df[['A','B','C']]


def friedman_Nemenyi_test(performance_matrix,critical_value, q_a, algorithm_manes):
    """
    @param: performance_matrix:测试结矩阵，每列代表一个算法，每行代表一个数据集
    @param: critical_value:F分布的临界值
    @param: q_a: Nemenyi检验中的qa值
    @param: algorithm_manes:算法的名字，用于绘制CD图
    """
    m,n = np.shape(performance_matrix)#m，n分别表示数据集个数和算法个数
    rank = np.zeros((m,n)) # 各个算法在数据集上的平分序值  
    for i in range(m):
        sort_value = np.sort(performance_matrix[i,:])#针对每个数据集(行)排序
        for j in range(n):
            count = 0
            avg_value = 0
            for k in range(n):
                if performance_matrix[i][j]==sort_value[k]:
                    count = count + 1
                    avg_value = avg_value + k + 1
            rank[i][j] =  avg_value / count #求平分序值
    avg_rank = rank.mean(axis=0)#各个算法在所有数据集上的平均排序
    sum_rank = 0
    for i in range(n):
        sum_rank = sum_rank + avg_rank[i]**2
    T_chi = (12*m/(n*(n+1)))*(sum_rank-n*(n+1)**2/4)#计算统计变量
    T_F = ((m-1)*T_chi)/(m*(n-1)-T_chi)#计算统计变量
   
    if T_F < critical_value:#判断是否存在显著差异
        print("T_F=%1.3f < critical_value = %1.3f NO Critical Difference..." %(T_F, critical_value))
    else:#如果存在显著差异，则进行Nemenyi后续检验，并绘制CD图
        print("T_F=%1.3f > critical_value = %1.3f  Critical Difference Need post-hoc test..." %(T_F, critical_value))
        cd = q_a*((n*(n+1))/(6*m))**0.5
        print("CD=%1.3f"%(cd))
        min_ = [x for x in avg_rank - cd/2]
        max_ = [x for x in avg_rank + cd/2]
        plt.title("friedman-Nemenyi Test")
        plt.scatter(avg_rank,algorithm_manes)
        plt.hlines(algorithm_manes,min_,max_)
    return avg_rank, T_F, cd #返回算法的平均排序，统计变量值，CD值
friedman_Nemenyi_test(df, critical_value, q_a, cross_validation_T_test)
